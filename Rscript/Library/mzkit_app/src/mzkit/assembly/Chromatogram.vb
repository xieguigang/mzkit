#Region "Microsoft.VisualBasic::8fbcd0451a25979f6d06d2ecb773fb8b, Rscript\Library\mzkit_app\src\mzkit\assembly\Chromatogram.vb"

    ' Author:
    ' 
    '       xieguigang (gg.xie@bionovogene.com, BioNovoGene Co., LTD.)
    ' 
    ' Copyright (c) 2018 gg.xie@bionovogene.com, BioNovoGene Co., LTD.
    ' 
    ' 
    ' MIT License
    ' 
    ' 
    ' Permission is hereby granted, free of charge, to any person obtaining a copy
    ' of this software and associated documentation files (the "Software"), to deal
    ' in the Software without restriction, including without limitation the rights
    ' to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    ' copies of the Software, and to permit persons to whom the Software is
    ' furnished to do so, subject to the following conditions:
    ' 
    ' The above copyright notice and this permission notice shall be included in all
    ' copies or substantial portions of the Software.
    ' 
    ' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    ' IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    ' FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    ' AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    ' LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    ' OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    ' SOFTWARE.



    ' /********************************************************************************/

    ' Summaries:


    ' Code Statistics:

    '   Total Lines: 413
    '    Code Lines: 260 (62.95%)
    ' Comment Lines: 98 (23.73%)
    '    - Xml Docs: 93.88%
    ' 
    '   Blank Lines: 55 (13.32%)
    '     File Size: 16.11 KB


    ' Module ChromatogramTools
    ' 
    '     Constructor: (+1 Overloads) Sub New
    ' 
    '     Function: addOverlaps, asChromatogram, overlapFromList, overlapFromVector, overlaps
    '               overlapsMatrix, overlapsSummary, overlapsTable, ReadData, scaleScanTime
    '               setLabels, subset, toChromatogram, topInto
    ' 
    '     Sub: PackData
    ' 
    ' /********************************************************************************/

#End Region

Imports System.IO
Imports System.Text
Imports BioNovoGene.Analytical.MassSpectrometry
Imports BioNovoGene.Analytical.MassSpectrometry.Assembly
Imports BioNovoGene.Analytical.MassSpectrometry.Math
Imports BioNovoGene.Analytical.MassSpectrometry.Math.Chromatogram
Imports BioNovoGene.Analytical.MassSpectrometry.SignalReader
Imports Microsoft.VisualBasic.CommandLine.Reflection
Imports Microsoft.VisualBasic.ComponentModel.DataSourceModel
Imports Microsoft.VisualBasic.Linq
Imports Microsoft.VisualBasic.Math
Imports Microsoft.VisualBasic.Math.SignalProcessing
Imports Microsoft.VisualBasic.Scripting.MetaData
Imports SMRUCC.Rsharp.Runtime
Imports SMRUCC.Rsharp.Runtime.Components
Imports SMRUCC.Rsharp.Runtime.Internal
Imports SMRUCC.Rsharp.Runtime.Internal.Object
Imports SMRUCC.Rsharp.Runtime.Interop
Imports SMRUCC.Rsharp.Runtime.Vectorization
Imports ChromatogramTick = BioNovoGene.Analytical.MassSpectrometry.Math.Chromatogram.ChromatogramTick
Imports RInternal = SMRUCC.Rsharp.Runtime.Internal

''' <summary>
''' A chromatogram is the trace generated by the detector 
''' signal and requires a carefully controlled flow rate
''' of the carrier gas (mobile phase) and a carefully 
''' controlled temperature of the column (stationary phase) 
''' to yield repeatable results.
''' </summary>
<Package("chromatogram")>
<RTypeExport("overlaps", GetType(ChromatogramOverlap))>
Module ChromatogramTools

    Sub New()
        Call ConsolePrinter.AttachConsoleFormatter(Of ChromatogramOverlap)(AddressOf overlapsSummary)
        Call RInternal.Object.Converts.makeDataframe.addHandler(GetType(ChromatogramOverlap), AddressOf overlapsTable)
    End Sub

    Private Function overlapsTable(data As ChromatogramOverlap, args As list, env As Environment) As dataframe
        Dim summary As New dataframe With {
            .columns = New Dictionary(Of String, Array),
            .rownames = data.overlaps.Keys.ToArray
        }
        Dim seq = summary.rownames _
            .Select(Function(key) data(key)) _
            .ToArray

        summary.add("TIC", seq.Select(Function(t) t.TIC.Sum))
        summary.add("BPC", seq.Select(Function(t) t.maxInto))

        Return summary
    End Function

    Private Function overlapsSummary(data As ChromatogramOverlap) As String
        Dim text As New StringBuilder

        Call text.AppendLine($"Chromatogram Overlaps Of {data.length} files:")

        For Each file As String In data.overlaps.Keys
            Call text.AppendLine($"  {file} {data(file).scan_time.Length} scans")
        Next

        Return text.ToString
    End Function

    ''' <summary>
    ''' convert dataset to chromatography dataset
    ''' </summary>
    ''' <param name="scans">
    ''' can be a data sequence of ms1 scan object or rt 
    ''' scan time vector if the signal data parameter 
    ''' is assigned value.
    ''' </param>
    ''' <param name="args">
    ''' this optional parameter value could be a numeric vector
    ''' for represents the intensity value if the scans parameter
    ''' is a numeric vector for represents the RT value
    ''' </param>
    ''' <param name="env"></param>
    ''' <returns></returns>
    ''' <example>
    ''' let rt = 1:5;
    ''' let intensity = [242 374 8923 74234 23];
    ''' 
    ''' print(as.chromatogram(rt, intensity));
    ''' </example>
    <ExportAPI("as.chromatogram")>
    <RApiReturn(GetType(Chromatogram), GetType(ChromatogramTick))>
    Public Function asChromatogram(<RRawVectorArgument>
                                   scans As Object,
                                   <RListObjectArgument>
                                   Optional args As list = Nothing,
                                   Optional env As Environment = Nothing) As Object

        Dim ms1 As pipeline = pipeline.TryCreatePipeline(Of ms1_scan)(scans, env, suppress:=True)

        If ms1.isError Then
            ' $2 means the args is the second
            ' parameter of this function
            Dim intensity As Double() = args.getValue(Of Double())(
                {"into", "intensity", "TIC", "BPC", "tic", "bpc", "totalIons", "basePeak", "$2"}, env)

            If intensity.IsNullOrEmpty Then
                ms1 = pipeline.TryCreatePipeline(Of ChromatogramTick)(scans, env, suppress:=True)

                If ms1.isError Then
                    Return ms1.getError
                Else
                    Return ms1 _
                        .populates(Of ChromatogramTick)(env) _
                        .ToArray
                End If
            End If

            Dim scan_time As Double() = CLRVector.asNumeric(scans)

            Return scan_time _
                .Select(Function(t, i)
                            Return New ChromatogramTick With {
                                .Time = t,
                                .Intensity = intensity(i)
                            }
                        End Function) _
                .ToArray
        End If

        Dim scan As ms1_scan() = ms1 _
            .populates(Of ms1_scan)(env) _
            .OrderBy(Function(ti) ti.scan_time) _
            .ToArray
        Dim chr As New Chromatogram With {
            .scan_time = scan.Select(Function(ti) ti.scan_time).ToArray,
            .TIC = scan.Select(Function(ti) ti.intensity).ToArray,
            .BPC = .TIC
        }

        Return chr
    End Function

    ''' <summary>
    ''' Convert chromatogram tick point data to a chromatogram object
    ''' </summary>
    ''' <param name="ticks">
    ''' A vector of the <see cref="ChromatogramTick"/> object or a dataframe object.
    ''' 
    ''' If the data input is a dataframe object, then the data fields is
    ''' required for create the chromatogram object:
    ''' 
    ''' 1. rt,RT,retention_time: used for represents the retention time data, data should be in time data unit seconds
    ''' 2. basePeak,BPC: used for represents the base peak ion intensity value
    ''' 3. totalIon,TIC: used for represents the total ions intensity value
    ''' 4. into,intensity: used for represents the ion intensity value if the basePeak or total ion data is not specific
    ''' </param>
    ''' <returns>
    ''' A chromatogram data object, which could be used for do 
    ''' chromatogram overlaps or data plot visualization.
    ''' </returns>
    <ExportAPI("toChromatogram")>
    <RApiReturn(GetType(Chromatogram))>
    Public Function toChromatogram(<RRawVectorArgument> ticks As Object,
                                   Optional name As String = Nothing,
                                   Optional env As Environment = Nothing) As Object
        Dim totalIons As Double()
        Dim basePeaks As Double()
        Dim scan_time As Double()

        If TypeOf ticks Is dataframe Then
            Dim df As dataframe = DirectCast(ticks, dataframe)

            totalIons = df.getVector(Of Double)("totalIon", "TIC", "into", "intensity")
            basePeaks = df.getVector(Of Double)("basePeak", "BPC", "into", "intensity")
            scan_time = df.getVector(Of Double)("rt", "RT", "retention_time", "retention time")

            If basePeaks.IsNullOrEmpty Then
                basePeaks = totalIons
            End If
            If totalIons.IsNullOrEmpty Then
                totalIons = basePeaks
            End If

            ' check data fields
            If totalIons.IsNullOrEmpty OrElse basePeaks.IsNullOrEmpty Then
                Return RInternal.debug.stop("missing intensity value for create the chromatogram object!", env)
            ElseIf scan_time.IsNullOrEmpty Then
                Return RInternal.debug.stop("the retention time is not provided!", env)
            End If
        Else
            Dim ticksBuf = pipeline.TryCreatePipeline(Of ChromatogramTick)(ticks, env, suppress:=True)

            If ticksBuf.isError Then
                Return ticksBuf.getError
            End If

            Dim chromatogramTicks As ChromatogramTick() = ticksBuf _
                .populates(Of ChromatogramTick)(env) _
                .ToArray

            scan_time = chromatogramTicks _
                .Select(Function(t) t.Time) _
                .ToArray
            totalIons = chromatogramTicks _
                .Select(Function(t) t.Intensity) _
                .ToArray
            basePeaks = totalIons
        End If

        Return New Chromatogram With {
            .BPC = basePeaks,
            .scan_time = scan_time,
            .TIC = totalIons,
            .name = name
        }
    End Function

    ''' <summary>
    ''' Add a chromatogram data in the chromatogram overlap collection
    ''' </summary>
    ''' <param name="overlaps">A chromatogram overlap collection object to be add new layer to it</param>
    ''' <param name="data">usually be a chromatogram data that extract from a sample data</param>
    ''' <returns></returns>
    <ROperator("+")>
    Public Function addOverlaps(overlaps As ChromatogramOverlap, data As Chromatogram) As ChromatogramOverlap
        Call overlaps.Add(data)
        Return overlaps
    End Function

    ''' <summary>
    ''' get subset of the chromatogram data by names
    ''' </summary>
    ''' <param name="overlaps"></param>
    ''' <param name="names"></param>
    ''' <returns></returns>
    <ExportAPI("subset")>
    Public Function subset(overlaps As ChromatogramOverlap, names As String()) As ChromatogramOverlap
        Return overlaps(names)
    End Function

    <ExportAPI("topInto")>
    Public Function topInto(overlaps As ChromatogramOverlap, n As Integer) As ChromatogramOverlap
        Dim topNames = overlaps.getNames.OrderByDescending(Function(id) overlaps(id).maxInto).Take(n).ToArray
        Dim subset As New ChromatogramOverlap

        For Each id As String In topNames
            Call subset.overlaps.Add(id, overlaps(id))
        Next

        Return subset
    End Function

    ''' <summary>
    ''' set new labels to the chromatogram overlap data
    ''' </summary>
    ''' <param name="overlaps"></param>
    ''' <param name="names"></param>
    ''' <param name="env"></param>
    ''' <returns></returns>
    <ExportAPI("labels")>
    Public Function setLabels(overlaps As ChromatogramOverlap,
                              names As String(),
                              Optional env As Environment = Nothing) As ChromatogramOverlap

        Call overlaps.setNames(names, env)
        Return overlaps
    End Function

    ''' <summary>
    ''' scale the RT into different time data unit
    ''' </summary>
    ''' <param name="overlaps"></param>
    ''' <param name="unit">
    ''' the time data unit could be ``minute`` or ``hour``.
    ''' </param>
    ''' <returns></returns>
    <ExportAPI("scale_time")>
    Public Function scaleScanTime(overlaps As ChromatogramOverlap, Optional unit As String = "minute") As ChromatogramOverlap
        Dim scaler As Double = 1

        If LCase(unit) = "minute" Then
            scaler = 60
        ElseIf LCase(unit) = "hour" Then
            scaler = 60 * 60
        Else
            scaler = 1
        End If

        Return New ChromatogramOverlap With {
            .overlaps = overlaps.overlaps _
                .ToDictionary(Function(a) a.Key,
                              Function(a)
                                  Return New Chromatogram With {
                                      .BPC = a.Value.BPC,
                                      .TIC = a.Value.TIC,
                                      .scan_time = a.Value.scan_time.AsVector / scaler
                                  }
                              End Function)
        }
    End Function

    ''' <summary>
    ''' Convert the overlap list to the matrix
    ''' </summary>
    ''' <param name="overlaps"></param>
    ''' <param name="dt"></param>
    ''' <returns></returns>
    <ExportAPI("overlapsMatrix")>
    Public Function overlapsMatrix(overlaps As ChromatogramOverlap, Optional dt As Double = 0.3) As Object
        Dim rulerRT As Double() = overlaps.UnionTimeSeq(dt)
        Dim matrix As New dataframe With {
            .columns = New Dictionary(Of String, Array)
        }

        Call matrix.add("RT", rulerRT)

        For Each chr As NamedValue(Of Chromatogram) In overlaps.EnumerateSignals
            Dim TIC As GeneralSignal = chr.Value.GetSignal(isbpc:=False)
            Dim line = Resampler.CreateSampler(TIC)(rulerRT).ToArray

            Call matrix.add(chr.Name, line)
        Next

        Return matrix
    End Function

    ''' <summary>
    ''' Create chromatogram overlaps from a set of chromatogram objects
    ''' </summary>
    ''' <param name="TIC">
    ''' A set of the chromatogram data objects, it chould be a vector of the
    ''' chromatogram data object or a list of the chromatogram objects.
    ''' The chromatogram data object in this input collection source could be
    ''' created via the ``toChromatogram`` function.
    ''' </param>
    ''' <param name="env"></param>
    ''' <returns></returns>
    <ExportAPI("overlaps")>
    <RApiReturn(GetType(ChromatogramOverlap))>
    Public Function overlaps(<RRawVectorArgument>
                             Optional TIC As Object = Nothing,
                             Optional env As Environment = Nothing) As Object

        If TIC Is Nothing Then
            Return New ChromatogramOverlap
        ElseIf TypeOf TIC Is ChromatogramOverlap Then
            Return TIC
        End If

        If TypeOf TIC Is list Then
            Return overlapFromList(TIC, env)
        Else
            Return overlapFromVector(TIC, env)
        End If
    End Function

    Private Function overlapFromList(tic As Object, env As Environment) As Object
        Dim result As New ChromatogramOverlap

        For Each item In DirectCast(tic, list).namedValues
            If Not TypeOf item.Value Is Chromatogram Then
                Return Message.InCompatibleType(
                    require:=GetType(Chromatogram),
                    given:=item.Value.GetType,
                    envir:=env,
                    message:=$"item '{item.Name}' is not a chromatogram value."
                )
            Else
                result(item.Name) = item.Value
            End If
        Next

        Return result
    End Function

    Private Function overlapFromVector(tic As Object, env As Environment) As Object
        Dim overlapsData As pipeline = pipeline.TryCreatePipeline(Of Chromatogram)(tic, env)
        Dim result As New ChromatogramOverlap

        If overlapsData.isError Then
            Return overlapsData.getError
        Else
            Dim name As String

            For Each item As SeqValue(Of Chromatogram) In overlapsData _
                .populates(Of Chromatogram)(env) _
                .SeqIterator(offset:=1)

                name = item.value.name
                name = If(name.StringEmpty(, True), "chromatogram_" & item.i, name)
                result(name) = item
            Next
        End If

        Return result
    End Function

    ''' <summary>
    ''' save the chrome overlaps data as the cdf data file
    ''' </summary>
    ''' <param name="overlaps"></param>
    ''' <param name="cdf"></param>
    <ExportAPI("write.pack")>
    Public Sub PackData(overlaps As ChromatogramOverlap, cdf As String)
        Using file As Stream = cdf.Open(FileMode.OpenOrCreate, doClear:=True, [readOnly]:=False)
            Call overlaps.SavePackData(file)
        End Using
    End Sub

    <ExportAPI("read.pack")>
    Public Function ReadData(cdf As String) As ChromatogramOverlap
        Using file As Stream = cdf.Open(FileMode.Open, doClear:=False, [readOnly]:=True)
            Return New ChromatogramOverlap(file.ReadPackData.overlaps)
        End Using
    End Function
End Module
